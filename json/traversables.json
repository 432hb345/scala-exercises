{
  "title": "Traversables",
  "modules": [
    {
      "preparagraph": "At the top of the collection hierarchy is trait *Traversable*. Its only abstract operation is `foreach`:\n\n```\ndef foreach[U](f: Elem => U) \n```\n\nCollection classes that implement *Traversable* just need to define this method; all other methods can be inherited from *Traversable*.\n\nThe `foreach` method is meant to traverse all elements of the collection, and apply the given operation, `f`, to each element. The type of the operation is `Elem => U`, where `Elem` is the type of the collectionâ€™s elements and `U` is an arbitrary result type. The invocation of `f` is done for its side effect only; in fact any function result of `f` is discarded by `foreach`.\n\nTraversables are the superclass of *Lists*, *Arrays*, *Maps*, *Sets*, *Streams*, and more.  The methods involved can be applied to each other in a different type. `++` appends two Traversables together.",
      "code": "val set = Set(1, 9, 10, 22)\nval list = List(3, 4, 5, 10)\nval result = set ++ list\nresult.size should be(__)\n\nval result2 = list ++ set\nresult2.size should be(__)",
      "solutions": [
        "7",
        "8"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`map` will apply the given function on all elements of a *Traversable* and return a new collection of the result.",
      "code": "val set = Set(1, 3, 4, 6)\nval result = set.map(_ * 4)\nresult.last should be(__)",
      "solutions": [
        "24"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`flatten` will smash all child *Traversables* within a *Traversable*",
      "code": "val list = List(List(1), List(2, 3, 4), List(5, 6, 7), List(8, 9, 10))\nlist.flatten should be(List(__, __, __, __, __, __, __, __, __, __))",
      "solutions": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`flatMap` will not only apply the given function on all elements of a *Traversable*, but all elements within the elements and `flatten` the results:",
      "code": "val list = List(List(1), List(2, 3, 4), List(5, 6, 7), List(8, 9, 10))\nval result = list.flatMap(_.map(_ * 4))\nresult should be(List(__, __, __, __, __, __, __, __, __, __))",
      "solutions": [
        "4",
        "8",
        "12",
        "16",
        "20",
        "24",
        "28",
        "32",
        "36",
        "40"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`flatMap` of `Options` will filter out all `None`s and Keep the `Some`s",
      "code": "val list = List(1, 2, 3, 4, 5)\nval result = list.flatMap(it => if (it % 2 == 0) Some(it) else None)\nresult should be(List(__, __))",
      "solutions": [
        "2",
        "4"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`collect` will apply a partial function to all elements of a *Traversable* and will return a different collection. In this exercise, a case fragment is a partial function:",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nval result = list.collect {\n  case x: Int if (x % 2 == 0) => x * 3\n}\nresult should be(List(__, __, __, __))",
      "solutions": [
        "12",
        "18",
        "24",
        "42"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`collect` will apply a partial function to all elements of a *Traversable* and will return a different collection. In this exercise, two case fragments are chained to create a more robust result:",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nval partialFunction1: PartialFunction[Int, Int] = {\n  case x: Int if x % 2 == 0 => x * 3\n}\nval partialFunction2: PartialFunction[Int, Int] = {\n  case y: Int if y % 2 != 0 => y * 4\n}\nval result = list.collect(partialFunction1 orElse partialFunction2)\nresult should be(List(__, __, __, __, __, __, __))",
      "solutions": [
        "12",
        "18",
        "28",
        "24",
        "36",
        "52",
        "42"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`foreach` will apply a function to all elements of a *Traversable*, but unlike\n the `map` function, it will not return anything since the return type is `Unit`, which is like a `void` return type in *Java*, *C++*",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nlist.foreach(num => println(num * 4))\nlist should be(List(__, __, __, __, __, __, __))",
      "solutions": [
        "4",
        "6",
        "7",
        "8",
        "9",
        "13",
        "14"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toArray` will convert any *Traversable* to an `Array`, which is a special wrapper around a primitive *Java* array.",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toArray\nresult.isInstanceOf[Array[Int]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toList` will convert any *Traversable* to a `List`.",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toList\n\nresult.isInstanceOf[List[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toList`, as well as other conversion methods like `toSet`, `toArray`, will not convert if the collection type is the same.",
      "code": "val list = List(5, 6, 7, 8, 9)\nval result = list.toList\nresult eq list should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toIterable` will convert any *Traversable* to an *Iterable*. This is a base *trait* for all Scala collections that define an iterator method to step through one-by-one the collection's elements. ",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toIterable\nresult.isInstanceOf[Iterable[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toSeq` will convert any *Traversable* to a *Seq* which is an ordered `Iterable`   and is the superclass to *List*, *Queues*, and *Vectors*. *Sequences* provide a method apply for indexing. Indices range from 0 up the the length of a sequence.",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toSeq\nresult.isInstanceOf[Seq[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toIndexedSeq` will convert any *Traversable* to an *IndexedSeq* which is an indexed sequence used in *Vectors* and *Strings*",
      "code": "val set = Set(4, 6, 7, 8, 9, 13, 14)\nval result = set.toIndexedSeq\nresult.isInstanceOf[IndexedSeq[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toStream` will convert any *Traversable* to a `Stream` which is a lazy list where elements are evaluated as they are needed.",
      "code": "",
      "solutions": [],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toSet` will convert any *Traversable* to a *Set* which is a collection of unordered, unique values.",
      "code": "val list = List(4, 6, 7, 8, 9, 13, 14)\nval result = list.toSet\nresult.isInstanceOf[Set[_]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toMap` will convert any *Traversable* to a *Map*. How it's used depends on the original collection; if it's a *List* or *Seq*, it should be of parameterized type *Tuple2*.",
      "code": "val list = List(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nval result = list.toMap\nresult.isInstanceOf[Map[_, _]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`toMap` will convert a *Set* to a *Map*, it should be of parameterized type *Tuple2*.",
      "code": "val set = Set(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nval result = set.toMap\nresult.isInstanceOf[Map[_, _]] should be(__)",
      "solutions": [
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`isEmpty` is pretty self evident",
      "code": "val map = Map(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nmap.isEmpty should be(__)\n\nval set = Set()\nset.isEmpty should be(__)",
      "solutions": [
        "false",
        "true"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`nonEmpty` is pretty self evident too",
      "code": "val map = Map(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nmap.nonEmpty should be(__)\n\nval set = Set()\nset.nonEmpty should be(__)",
      "solutions": [
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`size` provides the size of the traversable",
      "code": "val map = Map(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nmap.size should be(__)",
      "solutions": [
        "2"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`hasDefiniteSize` will return `true` if there is traversable that has a finite end, otherwise `false`.",
      "code": "val map = Map(\"Phoenix\" -> \"Arizona\", \"Austin\" -> \"Texas\")\nmap.hasDefiniteSize should be(__)\n\nimport Stream.cons\nval stream = cons(0, cons(1, Stream.empty))\nstream.hasDefiniteSize should be(__)",
      "solutions": [
        "true",
        "false"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`head` will return the first element of an ordered collection, or some random element if order is not defined like in a *Set* or *Map*",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.head should be(__)",
      "solutions": [
        "10"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`headOption` will return the first element as an *Option* of an order collection, or some random element if order is not defined.  If a first element is not available, then *None* is returned.",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.headOption should be(Some(__))\n\nval list2 = List()\nlist2.headOption should be(__)",
      "solutions": [
        "10",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`last` will return the last element of an ordered collection, or some random element if order is not defined like in a *Set* or *Map*.",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.last should be(__)",
      "solutions": [
        "22"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`lastOption` will return the first element as an *Option* of an order collection, or some random element if order is not defined.  If a first element is not available, then `None` is returned:",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.lastOption should be(Some(__))\n\nval list2 = List()\nlist2.lastOption should be(__)",
      "solutions": [
        "22",
        "None"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "`find` will locate the first item that matches a predicate p as *Some* or *None* if an element is not found:",
      "code": "val list = List(10, 19, 45, 1, 22)\nlist.find(_ % 2 != 0) should be(Some(__))\n\nval list2 = List(4, 8, 16)\nlist2.find(_ % 2 != 0) should be(__)",
      "solutions": [
        "19",
        "None"
      ],
      "postparagraph": ""
    }
  ]
}